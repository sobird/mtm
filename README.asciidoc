# webpack5 配置
:toc:

本文档从零开始配置 `react + typescript` 项目。

## 安装webpack
* *webpack* webpack 打包工具
* *webpack-cli* webpack 命令行接口
* *webpack-dev-server* 在本地启动一个http服务，运行应用

```sh
yarn add -D webpack webpack-cli webpack-dev-server
```

## webpack.config.js
在项目根目录创建 `webpack.config.js` 配置文件，基本结构如下：

```js
const isProduction = process.env.NODE_ENV === 'production';

const config = {
  // webpack config
};

module.exports = () => {
  if (isProduction) {
    config.mode = 'production';

  } else {
    config.mode = 'development';
  }
  return config;
}
```

## 公共配置
配置entry、output、devtool和devServer
```js
{
  devtool: isProduction ? false : 'inline-source-map',
  entry: {
    app: [
      './src/index.tsx',
    ],
  },
  output: {
    path: path.resolve(__dirname, 'dist'),
    // pathinfo: true,
    filename: '[name].[contenthash].js',
    chunkFilename: '[name].[contenthash].chunk.js',
    publicPath: '/',
  },
  devServer: {
    open: true,
    host: 'localhost',
    port: 3000,
    hot: true,
    historyApiFallback: true,
  },
}
```

## scripts
配置 `package.json` 中的scripts字段，添加start、build、lint等命令

```json
  "scripts": {
    "start": "NODE_ENV=development webpack serve",
    "build": "webpack --mode=production --node-env=production",
    "lint": "eslint src --ext ts,tsx --report-unused-disable-directives --max-warnings 0"
  },
```

## 插件
### html-webpack-plugin
创建应用入口html，同时自动添加 `bundle.js` 文件，通过 `yarn add -D html-webpack-plugin`命令安装，基本配置如下：

```js
const HtmlWebpackPlugin = require('html-webpack-plugin');

const config = {
  plugins: [
    new HtmlWebpackPlugin({
      template: path.resolve('public/index.html'),
      filename: 'index.html',
      minify: true,
      inject: true,
      title: 'Webpack App',
    }),
  ]
}
```

### dotenv-webpack
为项目添加 `process.env` 环境变量，通过 `yarn add -D dotenv-webpack` 命令安装，基本配置如下：

```js
const Dotenv = require('dotenv-webpack');

const config = {
  plugins: [
    new Dotenv({
      path: path.join(__dirname, `.env.${process.env.NODE_ENV}`),
      safe: true,
      // hide any errors
      silent: true,
      // load all the predefined 'process.env' variables which will trump anything local per dotenv specs.
      systemvars: true,
      // Allows your variables to be "expanded" for reusability within your .env file.
      expand: true,
      // allow empty variables (e.g. `FOO=`) (treat it as empty string, rather than missing)
      allowEmptyValues: true,
      // load '.env.defaults' as the default values if empty.
      defaults: path.join(__dirname, '.env.defaults'),
    }),
  ]
}
```