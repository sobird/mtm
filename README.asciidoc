# webpack5 配置
:toc:

本文档从零开始配置 `react + typescript` 项目。

## 安装webpack
* *webpack* webpack 打包工具
* *webpack-cli* webpack 命令行接口
* *webpack-dev-server* 在本地启动一个http服务，运行应用

```sh
yarn add -D webpack webpack-cli webpack-dev-server
```

## webpack.config.js
在项目根目录创建 `webpack.config.js` 配置文件，基本结构如下：

```js
const isProduction = process.env.NODE_ENV === 'production';

const config = {
  // webpack config
};

module.exports = () => {
  if (isProduction) {
    config.mode = 'production';

  } else {
    config.mode = 'development';
  }
  return config;
}
```

## 公共配置
配置 `entry`、`output`、`devtool` 和 `devServer`
```js
{
  devtool: isProduction ? false : 'inline-source-map',
  entry: {
    app: [
      './src/index.tsx',
    ],
  },
  output: {
    path: path.resolve(__dirname, 'dist'),
    // pathinfo: true,
    filename: '[name].[contenthash].js',
    chunkFilename: '[name].[contenthash].chunk.js',
    publicPath: '/',
  },
  devServer: {
    open: true,
    host: 'localhost',
    port: 3000,
    hot: true,
    historyApiFallback: true,
  },
}
```

## scripts
配置 `package.json` 中的 `scripts` 字段，添加start、build、lint等命令

```json
  "scripts": {
    "start": "NODE_ENV=development webpack serve",
    "build": "webpack --mode=production --node-env=production",
    "lint": "eslint src --ext ts,tsx --report-unused-disable-directives --max-warnings 0"
  },
```

## plugin
### html-webpack-plugin
创建应用入口html，同时自动添加 `bundle.js` 文件，通过 `yarn add -D html-webpack-plugin` 命令安装，基本配置如下：

```js
const HtmlWebpackPlugin = require('html-webpack-plugin');

const config = {
  plugins: [
    new HtmlWebpackPlugin({
      template: path.resolve('public/index.html'),
      filename: 'index.html',
      minify: true,
      inject: true,
      title: 'Webpack App',
    }),
  ]
}
```

### dotenv-webpack
为项目添加 `process.env` 环境变量，通过 `yarn add -D dotenv-webpack` 命令安装，基本配置如下：

```js
const Dotenv = require('dotenv-webpack');

const config = {
  plugins: [
    new Dotenv({
      path: path.join(__dirname, `.env.${process.env.NODE_ENV}`),
      safe: true,
      // hide any errors
      silent: true,
      // load all the predefined 'process.env' variables which will trump anything local per dotenv specs.
      systemvars: true,
      // Allows your variables to be "expanded" for reusability within your .env file.
      expand: true,
      // allow empty variables (e.g. `FOO=`) (treat it as empty string, rather than missing)
      allowEmptyValues: true,
      // load '.env.defaults' as the default values if empty.
      defaults: path.join(__dirname, '.env.defaults'),
    }),
  ]
}
```

### mini-css-extract-plugin
将CSS提取到单独的CSS文件中，通过 `yarn add -D mini-css-extract-plugin` 安装，基本配置如下：

```js
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
...
module.exports = () => {
  if (isProduction) {
    config.mode = 'production';

    config.plugins.push(new MiniCssExtractPlugin({
      filename: '[name].[contenthash].css',
      chunkFilename: '[id].[contenthash].css',
    }));
  } else {
    config.mode = 'development';
  }
  return config;
};
```

## loader

### ts-loader
将 `TypeScript` 转化为 `JavaScript`，通过 `yarn add -D ts-loader` 安装，基本配置如下：

```js
const config = {
  module: {
    rules: [
      {
        // test: /\.ts(x?)$/,
        test: /\.(ts|tsx)$/i,
        use: [{
          loader: 'ts-loader',
          options: {
            // 跳过ts类型检查
            transpileOnly: true,
          },
        }],
        exclude: ['/node_modules/'],
      },
    ]
  }
}
```

### CSS

* *style-loader* 将JS文件中引入的CSS插入到HTML模板文件
* *mini-css-extract-plugin*  和 `style-loader` 功能一样，只是打包后会单独生成 CSS 文件而非直接写在 HTML 文件中，用于生产环境，开发环境不需要另外生成文件
* *css-loader* 让JS文件可以通过 `import` 或 `require` 等命令导入CSS
* *sass-loader* 将sass代码转换为css代码
* *less-loader* 将less代码转换为css代码
* *postcss-loader* 处理css代码，因为是处理css，所以postcss-loader要放在 css-loader sass-loader等之后，可以在 `webpack.config.js` 中直接进行配置，或在 `postcss.config.js` 中进行配置，postcss-loader会自动加载该配置文件。

通过下面命令批量安装所需的css相关loader
```js
yarn add -D style-loader css-loader sass-loader less-loader postcss-loader
```

```js
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const isProduction = process.env.NODE_ENV === 'production';
const stylesHandler = isProduction ? MiniCssExtractPlugin.loader : 'style-loader';

const config = {
  module: {
    rules: [
      {
        test: /\.s[ac]ss$/i,
        use: [stylesHandler, 'css-loader', 'sass-loader', 'postcss-loader'],
      },
      {
        test: /\.less$/,
        use: [stylesHandler, 'css-loader', 
          {
            loader: 'less-loader',
            options: {
              lessOptions: {
                modifyVars: {
                  'primary-color': '#0080FF',
                },
                javascriptEnabled: true,
                math: 'always',
              },
            },
          },
          'postcss-loader'
        ],
      },
      {
        test: /\.css$/i,
        use: [stylesHandler, 'css-loader', 'postcss-loader'],
      },
    ]
  }
}
```

### https://webpack.docschina.org/guides/asset-modules/[asset module]
在 webpack 5 之前，通常使用：

* *raw-loader* 将文件导入为字符串
* *url-loader* 将文件作为 data URI 内联到 bundle 中
* *file-loader* 将文件发送到输出目录

```js
const config = {
  module: {
    rules: [
      {
        test: /\.(eot|svg|ttf|woff|woff2|png|jpg|gif)$/i,
        type: 'asset',
      },
    ]
  }
}
```